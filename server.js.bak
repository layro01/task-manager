const express = require('express');
const bodyParser = require('body-parser');
const mysql = require('mysql2/promise');
const util = require('util');
const { exec } = require('child_process');
const serialize = require('node-serialize');
const path = require('path');

const app = express();

const PORT = process.env.PORT || 3000;

// Connection pool
const pool = mysql.createPool({
  host: 'localhost',
  user: 'root',
  password: 'password',
  database: 'task_manager',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});

const executeQuery = util.promisify(pool.query).bind(pool);

// Function to create the task_manager database and tasks table
async function setupDatabase() {
  const connection = await mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: 'password',
  });

  try {
    // Create the task_manager database if it doesn't exist
    await connection.query('CREATE DATABASE IF NOT EXISTS task_manager');

    // Use the task_manager database
    await connection.query('USE task_manager');

    // Create the tasks table if it doesn't exist
    await connection.query(`
      CREATE TABLE IF NOT EXISTS tasks (
        id INT AUTO_INCREMENT PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
      )
    `);

    console.log('Schema and table created successfully');
  } catch (error) {
    console.error(`Error creating schema and table: ${error.message}`);
  } finally {
    // Close the connection
    await connection.end();
  }
}

// Middleware
app.use(express.static('public'));
app.use(bodyParser.json());

// Routes
app.get('/tasks', async (req, res) => {
  try {
    const [tasks] = await executeQuery('SELECT * FROM tasks');
    res.json(tasks);
  } catch (error) {
    console.error(`Error: ${error.message}`);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.post('/tasks', async (req, res) => {
  const { title, description } = req.body;

  try {
    await executeQuery(`INSERT INTO tasks (title, description) VALUES (${title}, ${description})`);

    // Create the request_data directory if it doesn't exist
    const requestDataDirectory = path.join(__dirname, 'request_data');
    if (!fs.existsSync(requestDataDirectory)) {
      fs.mkdirSync(requestDataDirectory);
    }

    // Write the request data to a file
    //const jsonData = JSON.stringify(req.body);
    //const filePath = path.join(requestDataDirectory, `${title}.json`);
    //fs.writeFileSync(filePath, jsonData);

    // CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')
    exec(`test -d "./tmp" || { mkdir -p "./tmp" } && echo "JSON.stringify(${req.body})" > tmp/${title}.json`, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error executing this command: ${error}`);
      }
      console.log(`Command output: ${stdout}`);
    });

    res.status(201).json({ message: 'Task added successfully' });
  } catch (error) {
    console.error(`Error: ${error.message}`);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.post('/import-tasks', async (req, res) => {
  try {
    const importedTasksJson = Buffer.from(req.body.tasks, 'base64').toString('utf-8');
    const importedTasks = serialize.unserialize(importedTasksJson);

    const insertTasksQuery = 'INSERT INTO tasks (title, description) VALUES (?, ?)';
    for (const task of importedTasks) {
      await executeQuery(insertTasksQuery, [task.title, task.description]);
    }

    res.status(201).json({ message: 'Tasks imported successfully' });
  } catch (error) {
    console.error(`Error: ${error.message}`);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.get('/tasks/search/:title', async (req, res) => {
  const title = req.params.title;
  const query = `SELECT * FROM tasks WHERE title LIKE ?`;
  try {
    const [tasks] = await executeQuery(query, [`%${title}%`]);
    res.json(tasks);
  } catch (error) {
    console.error(`Error: ${error.message}`);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.post('/tasks/:id/comments', async (req, res) => {
  const taskId = req.params.id;
  const { comment } = req.body;

  try {
    const updateQuery = 'UPDATE tasks SET comments = JSON_ARRAY_APPEND(comments, "$", ?) WHERE id = ?';
    await executeQuery(updateQuery, [comment, taskId]);

    res.status(201).json({ message: 'Comment added successfully' });
  } catch (error) {
    console.error(`Error: ${error.message}`);
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// Set up the database schema and tables
setupDatabase();

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
